<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="userid" elementType="Argument">
              <stringProp name="Argument.name">userid</stringProp>
              <stringProp name="Argument.value">1118041430</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">1118041430</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">Equitas@1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Y/oHL5ZPoCDGIjP9sNSvzYhO8kX6XPKO7JW4sQbNh/oW8cjlbw41uSoJXHN683dz</stringProp>
            </elementProp>
            <elementProp name="bankid" elementType="Argument">
              <stringProp name="Argument.name">bankid</stringProp>
              <stringProp name="Argument.value">054UAT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="appversionno" elementType="Argument">
              <stringProp name="Argument.name">appversionno</stringProp>
              <stringProp name="Argument.value">4.1.14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//Glow 4.1.16</stringProp>
            </elementProp>
            <elementProp name="challengecode" elementType="Argument">
              <stringProp name="Argument.name">challengecode</stringProp>
              <stringProp name="Argument.value">100220</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="deviceno" elementType="Argument">
              <stringProp name="Argument.name">deviceno</stringProp>
              <stringProp name="Argument.value">e6292f18583db80e</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">q0g0zpMaGR1VZoLj8FyviHnf3UbdEbBxXBs+ZDHkjqruh3Odn30pdseHBFbs9xWd</stringProp>
            </elementProp>
            <elementProp name="appid" elementType="Argument">
              <stringProp name="Argument.name">appid</stringProp>
              <stringProp name="Argument.value">TC</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">//Glow GM</stringProp>
            </elementProp>
            <elementProp name="servername" elementType="Argument">
              <stringProp name="Argument.name">servername</stringProp>
              <stringProp name="Argument.value">mfiuat-mob.equitasbank.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="devicemodelno" elementType="Argument">
              <stringProp name="Argument.name">devicemodelno</stringProp>
              <stringProp name="Argument.value">Realme RMX1921</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="passwordencryptkey" elementType="Argument">
              <stringProp name="Argument.name">passwordencryptkey</stringProp>
              <stringProp name="Argument.value">706b889da35c4992b71f439d3d70f19a</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="brconnectappid" elementType="Argument">
              <stringProp name="Argument.name">brconnectappid</stringProp>
              <stringProp name="Argument.value">0ac5e9dd2a854312b168133c4463922c</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="brconnectapikey" elementType="Argument">
              <stringProp name="Argument.name">brconnectapikey</stringProp>
              <stringProp name="Argument.value">3hkY7CfHRikBCcoK+J6SHHTc5oZgNXplrPAJGUHfHNc=</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="brconnectversionno" elementType="Argument">
              <stringProp name="Argument.name">brconnectversionno</stringProp>
              <stringProp name="Argument.value">8.1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="challenge ok correct/MBSREG/frmMBS.aspx-4" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="DeviceNO" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">DeviceNO</stringProp>
                <stringProp name="Argument.value">${deviceno}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="DeviceModelName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">DeviceModelName</stringProp>
                <stringProp name="Argument.value">${devicemodelno}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="AppInstance" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">AppInstance</stringProp>
                <stringProp name="Argument.value">UAT</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="AppID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">AppID</stringProp>
                <stringProp name="Argument.value">${appid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="PlatFormID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">PlatFormID</stringProp>
                <stringProp name="Argument.value">Android</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="AppVersionNo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">AppVersionNo</stringProp>
                <stringProp name="Argument.value">${appversionno}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="WsName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">WsName</stringProp>
                <stringProp name="Argument.value">getBank</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="BankID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">BankID</stringProp>
                <stringProp name="Argument.value">${bankid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="ChallengeCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">ChallengeCode</stringProp>
                <stringProp name="Argument.value">${challengecode}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">s15.brnet.in</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/MBSREG/frmMBS.aspx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">identity</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">okhttp/3.8.0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">brconnectappid</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;BRConnectAPPID&gt;(.*?)&lt;/BRConnectAPPID&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">brconnectapikey</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;BRConnectAPIKey&gt;(.*?)&lt;/BRConnectAPIKey&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">brconnectversionno</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;BRConnectVersionNo&gt;(.*?)&lt;/BRConnectVersionNo&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Trucell Upgrade check /MBSCONUGD/V1/BRNetConnect-13" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;Method&quot;:&quot;AppUpgradeCheck&quot;,&quot;Parameters&quot;:&quot;&lt;AppUpgradeCheck&gt;&lt;BankID&gt;${bankid}&lt;/BankID&gt;&lt;AppID&gt;${appid}&lt;/AppID&gt;&lt;OperatorID&gt;${userid}&lt;/OperatorID&gt;&lt;AppVersionNo&gt;${appversionno}&lt;/AppVersionNo&gt;&lt;PlatFormID&gt;Android&lt;/PlatFormID&gt;&lt;/AppUpgradeCheck&gt;&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${servername}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/MBSCONUGD/V1/BRNetConnect</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">okhttp/3.8.0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${authorizationkey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.example.demo.AuthorizationKeyGenerator;

log.info(&quot;{\&quot;Method\&quot;:\&quot;AppUpgradeCheck\&quot;,\&quot;Parameters\&quot;:\&quot;&lt;AppUpgradeCheck&gt;&lt;BankID&gt;${bankid}&lt;/BankID&gt;&lt;AppID&gt;${appid}&lt;/AppID&gt;&lt;OperatorID&gt;${userid}&lt;/OperatorID&gt;&lt;AppVersionNo&gt;${appversionno}&lt;/AppVersionNo&gt;&lt;PlatFormID&gt;Android&lt;/PlatFormID&gt;&lt;/AppUpgradeCheck&gt;\&quot;}&quot;);

vars.put(&quot;authorizationkey&quot;,AuthorizationKeyGenerator.authkeygenerator(vars.get(&quot;brconnectapikey&quot;),vars.get(&quot;brconnectappid&quot;),&quot;{\&quot;Method\&quot;:\&quot;AppUpgradeCheck\&quot;,\&quot;Parameters\&quot;:\&quot;&lt;AppUpgradeCheck&gt;&lt;BankID&gt;${bankid}&lt;/BankID&gt;&lt;AppID&gt;${appid}&lt;/AppID&gt;&lt;OperatorID&gt;${userid}&lt;/OperatorID&gt;&lt;AppVersionNo&gt;${appversionno}&lt;/AppVersionNo&gt;&lt;PlatFormID&gt;Android&lt;/PlatFormID&gt;&lt;/AppUpgradeCheck&gt;\&quot;}&quot;,&quot;POST&quot;,vars.get(&quot;bankid&quot;),vars.get(&quot;brconnectversionno&quot;)));

log.info(vars.get(&quot;authorizationkey&quot;));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Truecell Login /MBSCONUGD/V1/BRNetConnect-15" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;Method&quot;:&quot;AuthenticateLogin&quot;,&quot;Parameters&quot;:&quot;&lt;AuthenticateLogin&gt;&lt;BankID&gt;${bankid}&lt;/BankID&gt;&lt;DeviceNO&gt;${encryptdeviceno}&lt;/DeviceNO&gt;&lt;AppID&gt;${appid}&lt;/AppID&gt;&lt;OperatorID&gt;${userid}&lt;/OperatorID&gt;&lt;Password&gt;${encryptpassword}&lt;/Password&gt;&lt;MPin&gt;&apos;&apos;&lt;/MPin&gt;&lt;GCMDeviceRegID&gt;&lt;/GCMDeviceRegID&gt;&lt;GCMAuthorizationKey&gt;&lt;/GCMAuthorizationKey&gt;&lt;AppVersionNo&gt;${appversionno}&lt;/AppVersionNo&gt;&lt;PlatFormID&gt;Android&lt;/PlatFormID&gt;&lt;WorkingDate&gt;${workingDate}&lt;/WorkingDate&gt;&lt;/AuthenticateLogin&gt;&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${servername}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/MBSCONUGD/V1/BRNetConnect</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">okhttp/3.8.0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${authorizationkey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.example.demo.AuthorizationKeyGenerator;

vars.put(&quot;workingDate&quot;,&quot;${__time(yyyy/MM/dd HH:mm:ss,)}&quot;);
log.info(vars.get(&quot;workingDate&quot;));

vars.put(&quot;encryptpassword&quot;, AuthorizationKeyGenerator.passwordEncrypt(vars.get(&quot;passwordencryptkey&quot;),vars.get(&quot;userid&quot;)+&quot;~&quot; + vars.get(&quot;password&quot;)));
vars.put(&quot;encryptdeviceno&quot;,AuthorizationKeyGenerator.passwordEncrypt(vars.get(&quot;passwordencryptkey&quot;),vars.get(&quot;deviceno&quot;)));

log.info(&quot;encrypted password:&quot; + vars.get(&quot;encryptpassword&quot;));
log.info(&quot;encrypted deviceno:&quot; + vars.get(&quot;encryptdeviceno&quot;));

log.info(&quot;{\&quot;Method\&quot;:\&quot;AuthenticateLogin\&quot;,\&quot;Parameters\&quot;:\&quot;&lt;AuthenticateLogin&gt;&lt;BankID&gt;${bankid}&lt;/BankID&gt;&lt;DeviceNO&gt;&quot;+vars.get(&quot;encryptdeviceno&quot;)+&quot;&lt;/DeviceNO&gt;&lt;AppID&gt;${appid}&lt;/AppID&gt;&lt;OperatorID&gt;${userid}&lt;/OperatorID&gt;&lt;Password&gt;&quot;+vars.get(&quot;encryptpassword&quot;)+&quot;&lt;/Password&gt;&lt;MPin&gt;&apos;&apos;&lt;/MPin&gt;&lt;GCMDeviceRegID&gt;&lt;/GCMDeviceRegID&gt;&lt;GCMAuthorizationKey&gt;&lt;/GCMAuthorizationKey&gt;&lt;AppVersionNo&gt;${appversionno}&lt;/AppVersionNo&gt;&lt;PlatFormID&gt;Android&lt;/PlatFormID&gt;&lt;WorkingDate&gt;${workingDate}&lt;/WorkingDate&gt;&lt;/AuthenticateLogin&gt;\&quot;}&quot;);

vars.put(&quot;authorizationkey&quot;,AuthorizationKeyGenerator.authkeygenerator(vars.get(&quot;brconnectapikey&quot;),vars.get(&quot;brconnectappid&quot;),&quot;{\&quot;Method\&quot;:\&quot;AuthenticateLogin\&quot;,\&quot;Parameters\&quot;:\&quot;&lt;AuthenticateLogin&gt;&lt;BankID&gt;${bankid}&lt;/BankID&gt;&lt;DeviceNO&gt;&quot;+vars.get(&quot;encryptdeviceno&quot;)+&quot;&lt;/DeviceNO&gt;&lt;AppID&gt;${appid}&lt;/AppID&gt;&lt;OperatorID&gt;${userid}&lt;/OperatorID&gt;&lt;Password&gt;&quot; +vars.get(&quot;encryptpassword&quot;)+&quot;&lt;/Password&gt;&lt;MPin&gt;&apos;&apos;&lt;/MPin&gt;&lt;GCMDeviceRegID&gt;&lt;/GCMDeviceRegID&gt;&lt;GCMAuthorizationKey&gt;&lt;/GCMAuthorizationKey&gt;&lt;AppVersionNo&gt;${appversionno}&lt;/AppVersionNo&gt;&lt;PlatFormID&gt;Android&lt;/PlatFormID&gt;&lt;WorkingDate&gt;&quot; + vars.get(&quot;workingDate&quot;) + &quot;&lt;/WorkingDate&gt;&lt;/AuthenticateLogin&gt;\&quot;}&quot;,&quot;POST&quot;,vars.get(&quot;bankid&quot;),vars.get(&quot;brconnectversionno&quot;)));

log.info(vars.get(&quot;authorizationkey&quot;));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">sessionid</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;SessionID&gt;(.*?)&lt;/SessionID&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ourbranchid</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;OurBranchID&gt;(.*?)&lt;/OurBranchID&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Trucell logout/MBSCONUGD/V1/BRNetConnect-12" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;Method&quot;:&quot;AppUserSessionLogout&quot;,&quot;Parameters&quot;:&quot;&lt;AppUserSessionLogout&gt;&lt;BankID&gt;${bankid}&lt;/BankID&gt;&lt;OperatorID&gt;${userid}&lt;/OperatorID&gt;&lt;SessionID&gt;${sessionid}&lt;/SessionID&gt;&lt;AppID&gt;${appid}&lt;/AppID&gt;&lt;/AppUserSessionLogout&gt;&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${servername}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/MBSCONUGD/V1/BRNetConnect</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">okhttp/3.8.0</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${authorizationkey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.example.demo.AuthorizationKeyGenerator;

log.info(&quot;{\&quot;Method\&quot;:\&quot;AppUserSessionLogout\&quot;,\&quot;Parameters\&quot;:\&quot;&lt;AppUserSessionLogout&gt;&lt;BankID&gt;${bankid}&lt;/BankID&gt;&lt;OperatorID&gt;${userid}&lt;/OperatorID&gt;&lt;SessionID&gt;${sessionid}&lt;/SessionID&gt;&lt;AppID&gt;${appid}&lt;/AppID&gt;&lt;/AppUserSessionLogout&gt;\&quot;}&quot;);

vars.put(&quot;authorizationkey&quot;,AuthorizationKeyGenerator.authkeygenerator(vars.get(&quot;brconnectapikey&quot;),vars.get(&quot;brconnectappid&quot;),&quot;{\&quot;Method\&quot;:\&quot;AppUserSessionLogout\&quot;,\&quot;Parameters\&quot;:\&quot;&lt;AppUserSessionLogout&gt;&lt;BankID&gt;${bankid}&lt;/BankID&gt;&lt;OperatorID&gt;${userid}&lt;/OperatorID&gt;&lt;SessionID&gt;${sessionid}&lt;/SessionID&gt;&lt;AppID&gt;${appid}&lt;/AppID&gt;&lt;/AppUserSessionLogout&gt;\&quot;}&quot;,&quot;POST&quot;,vars.get(&quot;bankid&quot;),vars.get(&quot;brconnectversionno&quot;)));

log.info(vars.get(&quot;authorizationkey&quot;));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
